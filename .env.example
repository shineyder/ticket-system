APP_NAME=TicketSystem
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

# --- Database (MongoDB for Event Store, Read Models, Cache, Sessions, Failed Jobs) ---
DB_CONNECTION=mongodb
DB_HOST=mongo # Docker service name
DB_PORT=27017
DB_DATABASE=tickets # Or your preferred database name
DB_USERNAME=
DB_PASSWORD=
DB_OPTIONS=replicaSet=rs0 # Required for MongoDB replica set setup in docker-compose

# --- Kafka (for publishing domain events) ---
KAFKA_BROKERS=kafka:9092 # Docker service name
KAFKA_TOPIC=ticket-events # Default topic name used by the listener

# --- Session ---
SESSION_DRIVER=database # Using MongoDB via DB_CONNECTION
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

# --- Queue (Redis for background jobs like projections and Kafka publishing) ---
QUEUE_CONNECTION=redis
# QUEUE_CONNECTION=sync # Use 'sync' for local debugging without a queue worker

# --- Cache ---
CACHE_STORE=database # Using MongoDB via DB_CONNECTION
# CACHE_PREFIX=

# --- Redis (Used by Queue) ---
REDIS_CLIENT=predis
REDIS_HOST=redis # Docker service name
REDIS_PASSWORD=null
REDIS_PORT=6379
# REDIS_DB=0 # Default Redis DB for queue connection 'default'
# REDIS_CACHE_DB=1 # Default Redis DB for cache connection 'cache' (if CACHE_STORE=redis)

# Escala dos servi√ßos Docker Compose
APP_REPLICAS=2
WORKER_REPLICAS=3
