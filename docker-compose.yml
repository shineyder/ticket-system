services:
  app:
    build:
      context: .
      target: dev
    image: ticket-system:dev
    env_file: .env
    volumes:
      - .:/var/www              # Hot-reload para desenvolvimento
      - /var/www/vendor
    depends_on:
      mongo:
        condition: service_healthy # Espera Mongo estar saudável
      kafka:
        condition: service_healthy # Espera Kafka estar saudável
    healthcheck:
       test: ["CMD", "php-fpm", "-t"] # Testa a configuração do FPM
       interval: 10s
       timeout: 5s
       retries: 3
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - .:/var/www
    depends_on:
      - app

  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - dev_mongodb_data:/data/db
    healthcheck:
       test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
       interval: 10s
       timeout: 10s
       retries: 5
       start_period: 10s

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092" # Porta externa
    environment:
      # -- Configuração KRaft --
      - KAFKA_CFG_NODE_ID=1 # ID único para este nó/broker
      - KAFKA_CFG_PROCESS_ROLES=broker,controller # Este nó atua como broker E controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER # Nome do listener para comunicação interna do controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093 # Informa quem são os controllers (nó 1 no host 'kafka' na porta 9093)
      - KAFKA_CLUSTER_ID=kRbbOftBQuKzDvVRm7BuJA # ID do cluster

      # -- Listeners (Como Kafka escuta) --
      # PLAINTEXT para clientes na 9092, CONTROLLER para comunicação interna na 9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      # -- Advertised Listeners (Como clientes conectam) --
      # Clientes DENTRO da rede docker conectam via 'kafka:9092'
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      # -- Mapeamento de Segurança --
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT

      # -- Outras Configurações --
      - ALLOW_PLAINTEXT_LISTENER=yes # Ainda necessário para Bitnami com PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true # Criação automática de tópicos

      # -- Opcional: Ajuste de memória --
      # - KAFKA_HEAP_OPTS=-Xmx512m -Xms256m
    volumes:
      - kafka_data:/bitnami/kafka # Persistir dados do Kafka
    healthcheck: # Verifica se Kafka está pronto
        test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
        interval: 15s
        timeout: 10s
        retries: 10
        start_period: 20s

volumes:
  dev_mongodb_data:
  kafka_data: # Adicionar volume para Kafka
